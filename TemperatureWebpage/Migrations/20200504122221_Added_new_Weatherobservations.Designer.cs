// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemperatureWebpage.Data;

namespace TemperatureWebpage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200504122221_Added_new_Weatherobservations")]
    partial class Added_new_Weatherobservations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TemperatureWebpage.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("GPSLatitude")
                        .HasColumnType("float");

                    b.Property<double>("GPSLongitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            GPSLatitude = 2020.0,
                            GPSLongitude = 10505.0,
                            LocationName = "USA"
                        });
                });

            modelBuilder.Entity("TemperatureWebpage.Models.WeatherObservation", b =>
                {
                    b.Property<int>("WeatherObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AirHumidity")
                        .HasColumnType("float");

                    b.Property<double>("AirPressure")
                        .HasColumnType("float");

                    b.Property<int>("LocationRefId")
                        .HasColumnType("int");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeOfDay")
                        .HasColumnType("datetime2");

                    b.HasKey("WeatherObservationId");

                    b.HasIndex("LocationRefId");

                    b.ToTable("WeatherObservations");

                    b.HasData(
                        new
                        {
                            WeatherObservationId = 1,
                            AirHumidity = 20.0,
                            AirPressure = 30.0,
                            LocationRefId = 1,
                            Temperature = 20.0,
                            TimeOfDay = new DateTime(2020, 5, 4, 14, 22, 21, 151, DateTimeKind.Local).AddTicks(9185)
                        },
                        new
                        {
                            WeatherObservationId = 2,
                            AirHumidity = 40.0,
                            AirPressure = 40.0,
                            LocationRefId = 1,
                            Temperature = 40.0,
                            TimeOfDay = new DateTime(2020, 5, 4, 14, 22, 21, 155, DateTimeKind.Local).AddTicks(1022)
                        },
                        new
                        {
                            WeatherObservationId = 3,
                            AirHumidity = 30.0,
                            AirPressure = 30.0,
                            LocationRefId = 1,
                            Temperature = 23.0,
                            TimeOfDay = new DateTime(2020, 5, 4, 14, 22, 21, 155, DateTimeKind.Local).AddTicks(1144)
                        },
                        new
                        {
                            WeatherObservationId = 4,
                            AirHumidity = 1000.0,
                            AirPressure = 12.0,
                            LocationRefId = 1,
                            Temperature = 55.0,
                            TimeOfDay = new DateTime(2020, 5, 4, 14, 22, 21, 155, DateTimeKind.Local).AddTicks(1150)
                        });
                });

            modelBuilder.Entity("TemperatureWebpage.Models.WeatherObservation", b =>
                {
                    b.HasOne("TemperatureWebpage.Models.Location", "Location")
                        .WithMany("WeatherObservations")
                        .HasForeignKey("LocationRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
