// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemperatureWebpage.Data;

namespace TemperatureWebpage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200427132129_newData")]
    partial class newData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TemperatureWebpage.Models.Location", b =>
                {
                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("GPSLatitude")
                        .HasColumnType("float");

                    b.Property<double>("GPSLongitude")
                        .HasColumnType("float");

                    b.HasKey("LocationName");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationName = "USA",
                            GPSLatitude = 2020.0,
                            GPSLongitude = 10505.0
                        });
                });

            modelBuilder.Entity("TemperatureWebpage.Models.WeatherObservation", b =>
                {
                    b.Property<int>("WeatherObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AirHumidity")
                        .HasColumnType("float");

                    b.Property<double>("AirPressure")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationsLocationName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeOfDay")
                        .HasColumnType("datetime2");

                    b.HasKey("WeatherObservationId");

                    b.HasIndex("LocationsLocationName");

                    b.ToTable("WeatherObservations");

                    b.HasData(
                        new
                        {
                            WeatherObservationId = 1,
                            AirHumidity = 40.0,
                            AirPressure = 30.0,
                            LocationName = "USA",
                            Temperature = 20.0,
                            TimeOfDay = new DateTime(2020, 4, 27, 15, 21, 29, 2, DateTimeKind.Local).AddTicks(1712)
                        });
                });

            modelBuilder.Entity("TemperatureWebpage.Models.WeatherObservation", b =>
                {
                    b.HasOne("TemperatureWebpage.Models.Location", "Locations")
                        .WithMany("WeatherObservations")
                        .HasForeignKey("LocationsLocationName");
                });
#pragma warning restore 612, 618
        }
    }
}
